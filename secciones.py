"""
secciones.py

Agrupa todas las funciones asociadas a las distintas secciones informativas del men√∫,
como carreras, modalidades, requisitos, contacto, redes sociales y especializaci√≥n.
"""
import time
import readchar
from utils import limpiar_pantalla, mostrar_seccion, formatear_parrafo
from datos import CARRERAS_INFO, CONTACTO, REQUISITOS
from colorama import Fore, Style


def mostrar_lista_carreras():
    """Imprime en pantalla una lista numerada de las carreras disponibles con su duraci√≥n."""

    for i, carrera in enumerate(CARRERAS_INFO, start=1):
        print(f"{Fore.CYAN}{i}. {Fore.WHITE}{carrera['nombre']} {Fore.LIGHTBLACK_EX}({carrera['duracion']}){Style.RESET_ALL}")


def seleccionar_carrera():
    """
    Solicita al usuario un n√∫mero de carrera.
    Retorna el diccionario de la carrera seleccionada o None si desea volver al men√∫.
    """

    seleccion = input(Fore.YELLOW + "\nIngrese n√∫mero de carrera (1-5): ").strip()
    if seleccion == '':
        return None
    elif seleccion.isdigit() and 0 < int(seleccion) <= len(CARRERAS_INFO):
        return CARRERAS_INFO[int(seleccion) - 1]
    else:
        print(Fore.RED + "\n‚ö†Ô∏è Opci√≥n no v√°lida. Intente nuevamente.")
        input("Presione Enter para continuar..." + Style.RESET_ALL)
        return "reintentar"


def mostrar_detalle_carrera(carrera):
    """
    Muestra todos los detalles de una carrera espec√≠fica, incluyendo plan de estudios.

    Par√°metros:
    - carrera (dict): Diccionario con los campos 'nombre', 'descripcion', 'duracion', etc.
    """
    
    limpiar_pantalla()
    mostrar_seccion(carrera['nombre'])         

    print(Fore.CYAN + f"üìù Descripci√≥n: {Fore.WHITE}{carrera['descripcion']}")
    print(Fore.CYAN + f"‚è≥ Duraci√≥n: {Fore.WHITE}{carrera['duracion']}")
    print(Fore.CYAN + f"üìÖ Inscripci√≥n: {Fore.WHITE}{carrera['inscripcion']}")
    print(Fore.CYAN + f"üè´ Modalidad: {Fore.WHITE}{carrera['modalidad']}")
    print(Fore.CYAN + f"üìã Requisitos: {Fore.WHITE}{carrera['requisitos']}")
    print(Fore.CYAN + "\nüìö Plan de estudios:" + Style.RESET_ALL)

    for materia in carrera['plan_estudio']:
        print(Fore.GREEN + f"   ‚Ä¢ {materia}")

    print()


def carrera():
    """Muestra las carreras una por una, con navegaci√≥n y toda la informaci√≥n detallada."""

    total = len(CARRERAS_INFO)
    indice = 0

    limpiar_pantalla()
    print(Fore.LIGHTBLACK_EX + "Cargando Carreras disponibles", end="", flush=True)
    for _ in range(3):
        time.sleep(0.2)
        print(".", end="", flush=True)
    time.sleep(0.3)

    while True:
        limpiar_pantalla()

        carrera = CARRERAS_INFO[indice]

        # Mostrar detalles
        print(Fore.CYAN + carrera['nombre'].upper().center(60) + Fore.RESET)
        print()
        for linea in formatear_parrafo(carrera['descripcion']):
            print(Fore.WHITE + linea)
        print()

        print(Fore.CYAN + f"üìÖ Inscripci√≥n: {Fore.WHITE}{carrera['inscripcion']}")
        print(Fore.CYAN + f"‚è≥ Duraci√≥n: {Fore.WHITE}{carrera['duracion']}")
        print(Fore.CYAN + f"üè´ Modalidad: {Fore.WHITE}{carrera['modalidad']}")
        print(Fore.CYAN + f"üìã Requisitos: {Fore.WHITE}{carrera['requisitos']}\n")

        print(Fore.CYAN + "üìö Plan de estudios:")
        for materia in carrera['plan_estudio']:
            print(Fore.GREEN + f"   ‚Ä¢ {materia}")


        print()
        
        print(Fore.YELLOW + f"‚Üê {indice + 1} / {total} ‚Üí".center(60) + Style.RESET_ALL)

        # Leer tecla
        tecla = readchar.readkey()
        if tecla == readchar.key.RIGHT:
            indice = (indice + 1) % total
            print(Fore.LIGHTBLACK_EX + "\nCambiando carrera", end="", flush=True)
            for _ in range(3):
                time.sleep(0.2)
                print(".", end="", flush=True)
            time.sleep(0.2)
        elif tecla == readchar.key.LEFT:
            indice = (indice - 1) % total
            print(Fore.LIGHTBLACK_EX + "\nCambiando carrera", end="", flush=True)
            for _ in range(3):
                time.sleep(0.2)
                print(".", end="", flush=True)
            time.sleep(0.2)
        elif tecla == readchar.key.ESC:
            return


def contacto():
    """Muestra la informaci√≥n de contacto del instituto con dise√±o visual y transici√≥n."""
    limpiar_pantalla()

    print(Fore.LIGHTBLACK_EX + "Cargando informaci√≥n de contacto", end="", flush=True)
    for _ in range(3):
        time.sleep(0.2)
        print(".", end="", flush=True)
    time.sleep(0.3)

    limpiar_pantalla()
    mostrar_seccion("CONTACTO INSTITUCIONAL")

    print(Fore.YELLOW + "üìç Direcci√≥n:" + Fore.WHITE, CONTACTO['direccion'])
    print(Fore.YELLOW + "üìû Tel√©fono:" + Fore.WHITE, CONTACTO['telefono'])
    print(Fore.YELLOW + "‚úâÔ∏è Email:" + Fore.WHITE, CONTACTO['email'])
    print(Fore.YELLOW + "üåê Sitio Web:" + Fore.CYAN, CONTACTO['web'])
    print()

    print(Fore.CYAN + "üëç Facebook:" + Fore.WHITE, CONTACTO['redes']['facebook'])
    print(Fore.CYAN + "üì∏ Instagram:" + Fore.WHITE, CONTACTO['redes']['instagram'])
    twitter = CONTACTO['redes'].get('twitter', 'No disponible')
    print(Fore.CYAN + "üê¶ Twitter:" + Fore.WHITE, twitter)

    input(Fore.LIGHTWHITE_EX + "\nPresione Enter para volver al men√∫...")


def requisitos():
    """Muestra los requisitos de inscripci√≥n con estilo de checklist y transici√≥n."""
    limpiar_pantalla()

    print(Fore.LIGHTBLACK_EX + "Cargando requisitos", end="", flush=True)
    for _ in range(3):
        time.sleep(0.2)
        print(".", end="", flush=True)
    time.sleep(0.3)

    limpiar_pantalla()
    mostrar_seccion("REQUISITOS DE INSCRIPCI√ìN")

    print(Fore.YELLOW + "üìã Documentaci√≥n requerida para todas las carreras:\n" + Style.RESET_ALL)

    for i, req in enumerate(REQUISITOS, start=1):
        print(Fore.GREEN + f"‚úîÔ∏è  {i}. {Fore.WHITE}{req}")

    print("\n" + Fore.LIGHTBLACK_EX + "‚ÑπÔ∏è  Asegurate de tener todos los documentos en original y copia." + Style.RESET_ALL)
    
    input(Fore.LIGHTWHITE_EX + "\nPresione Enter para volver al men√∫...")

